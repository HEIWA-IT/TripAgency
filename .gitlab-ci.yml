before_script:
  - |
    #!/bin/bash
    export APP_NAME=${CI_PROJECT_NAME}
    export BUILD_TYPE=${BUILD_TYPE}

    export CONTAINER_BUILD_TYPE=${CONTAINER_BUILD_TYPE}
    export CUKEDOCTOR_MAIN_JAR=${CUKEDOCTOR_MAIN_JAR}
    export CUKEDOCTOR_MAIN_VERSION=${CUKEDOCTOR_MAIN_VERSION}
    export DOCKER_BUILD_OPTIONS=${DOCKER_BUILD_OPTIONS}
    export CONTAINER_IMAGE=${DOCKER_PROJECT_REGISTRY}/${APP_NAME}-exposition:${VERSION}
    # export CONTAINER_IMAGE=$(echo "${DOCKER_PROJECT_REGISTRY}/${APP_NAME}-exposition:${CI_COMMIT_TAG}-${CI_COMMIT_SHORT_SHA}")
    export DOCKER_PROJECT_REGISTRY=${DOCKER_PROJECT_REGISTRY}
    export DOCKER_REGISTRY_URL=${DOCKER_REGISTRY_URL}
    export DOCKER_REGISTRY_USERNAME=${DOCKER_REGISTRY_USERNAME}
    export DOCKER_REGISTRY_PASSWORD=${DOCKER_REGISTRY_PASSWORD}
    export E2E_TEST_MODE=${E2E_TEST_MODE}
    export GRADLE_SETTINGS=${GRADLE_SETTINGS}
    # export GRADLE_USER_HOME=$(pwd)/.gradle
    export HOST=${HOST}
    export KUBERNETES_CLUSTER=${KUBERNETES_CLUSTER}
    export KUBERNETES_NAMESPACE=${KUBERNETES_NAMESPACE}
    export KUBERNETES_USER=${KUBERNETES_USER}
    export LOG_PATH=$LOG_PATH
    export MAVEN_CLI_OPTS=${MAVEN_CLI_OPTS}
    export MAVEN_GOAL=${MAVEN_GOAL}
    export MAVEN_OPTS=${MAVEN_OPTS}
    export MAVEN_REPOSITORY=${MAVEN_REPOSITORY}
    export MAVEN_SETTINGS=${MAVEN_SETTINGS}
    export MAVEN_SETTINGS_XML=${MAVEN_SETTINGS_XML}
    export SONARQUBE_CREDENTIALS=${SONARQUBE_CREDENTIALS}
    export SONARQUBE_URL=${SONARQUBE_URL}
    #export VERSION=$(git describe --tags --always)
    #export COMMIT_BRANCH=$(git branch --show-current)
    export VERSION=${CI_COMMIT_TAG}-${CI_COMMIT_SHORT_SHA}
    export COMMIT_BRANCH=${CI_COMMIT_BRANCH}


variables:
  GIT_SSL_NO_VERIFY: "true"
  DOCKER_TLS_CERTDIR: "/certs"
  MAVEN_OPTS: "-Dmaven.repo.local=/.m2"

cache:
  paths:
    - domain/build
    - repository/build
    - exposition/build
    - .gradle/wrapper
    - .gradle/caches
  policy: pull

stages:
  - setup
  - build_artifacts
  - quality
  - living_documentation_for_domain
  - build_and_publish_container_image
  - e2e_deploy
  - e2e_testing
  - e2e_delete
  - living_documentation_for_e2e

setup:
  stage: setup
  image: heiwait/git:v1.0
  script:
    - |
      ./pipeline/scripts/1_setup/check_pipeline_variables.sh

      VERSION=$(git describe --tags --always)
      echo "VERSION ${VERSION}"
      COMMIT_BRANCH=${CI_COMMIT_BRANCH}
      echo "COMMIT_BRANCH ${COMMIT_BRANCH}"

      echo "Generating versions to use now:"

      ARTIFACT_VERSION=$(./pipeline/scripts/1_setup/determine_version.sh "${COMMIT_BRANCH}" "${VERSION}")
      echo "ARTIFACT_VERSION ${ARTIFACT_VERSION}"

      CONTAINER_VERSION=$(./pipeline/scripts/1_setup/determine_container_version.sh "${COMMIT_BRANCH}" "${VERSION}")
      echo "CONTAINER_VERSION ${CONTAINER_VERSION}"

      CONTAINER_IMAGE="${DOCKER_PROJECT_REGISTRY}/${APP_NAME}-exposition:${CONTAINER_VERSION}"
      echo "CONTAINER_IMAGE ${CONTAINER_IMAGE}"

      echo "ARTIFACT_VERSION=${ARTIFACT_VERSION}" >> build.env
      echo "CONTAINER_VERSION=${CONTAINER_VERSION}" >> build.env
      echo "CONTAINER_IMAGE=${CONTAINER_IMAGE}" >> build.env
  artifacts:
    reports:
      dotenv: build.env

build:
  stage: build_artifacts
  needs:
    - job: setup
      artifacts: true
  script:
    - |
      ./pipeline/scripts/2_build_artifacts/build.sh "${ARTIFACT_VERSION}"
  artifacts:
    paths:
      - /var/log
      - domain/build
      - repository/build
      - exposition/build
    expire_in: 1 day
  cache:
    key: "gradle-cache-key"
    paths:
      - .gradle/wrapper
      - .gradle/caches
    policy: push

code_analysis:
  stage: quality
  image: sonarsource/sonar-scanner-cli:4.6
  needs:
    - job: build
    - job: setup
      artifacts: true
  script:
    - |
      ./pipeline/scripts/3_quality/launch_quality_scan.sh
  artifacts:
    paths:
      - domain/build
      - repository/build
      - exposition/build
    expire_in: 1 day

living_documentation_for_domain:
  stage: living_documentation_for_domain
  needs:
    - job: build
    - job: code_analysis
      artifacts: true
  script:
    - |
      ./pipeline/scripts/3_quality/generate_living_documentation.sh domain "${ARTIFACT_VERSION}" "${CUKEDOCTOR_MAIN_JAR}"
  artifacts:
    paths:
      - domain/build
    expire_in: 1 day

build_and_publish_container_image:
  stage: build_and_publish_container_image
  needs:
    - job: build
    - job: setup
      artifacts: true
  script:
    - |
      CONTAINER_IMAGE="${CONTAINER_IMAGE}""${CONTAINER_VERSION}"
      ./pipeline/scripts/4_build_and_publish_container_image/build_and_publish_container_image.sh "${CONTAINER_BUILD_TYPE}" "${CONTAINER_IMAGE}" "${ARTIFACT_VERSION}"

deploy_to_kubernetes:
  stage: e2e_deploy
  image: dtzar/helm-kubectl:3
  needs:
   - job: build_and_publish_container_image
   - job: setup
     artifacts: true
  script:
    - |
      ./k8s/scripts/connecting_to_kubernetes_cluster.sh
      ./k8s/scripts/deploy_to_kubernetes.sh ${CONTAINER_VERSION}

      echo "ARTIFACT_VERSION=${ARTIFACT_VERSION}" >> build.env
      echo "CONTAINER_VERSION=${CONTAINER_VERSION}" >> build.env
      echo "CONTAINER_IMAGE=${CONTAINER_IMAGE}" >> build.env

launch_e2e_test:
  stage: e2e_testing
  needs:
    - job: deploy_to_kubernetes
    - job: setup
      artifacts: true
  script:
    - |
      ./pipeline/scripts/5_e2e/launch_e2e_tests.sh "${ARTIFACT_VERSION}"

      echo "ARTIFACT_VERSION=${ARTIFACT_VERSION}" >> build.env
      echo "CONTAINER_VERSION=${CONTAINER_VERSION}" >> build.env
      echo "CONTAINER_IMAGE=${CONTAINER_IMAGE}" >> build.env
  artifacts:
    paths:
      - e2e/build
    expire_in: 1 day

delete_deployment_from_to_kubernetes:
  stage: e2e_delete
  image: dtzar/helm-kubectl:3
  needs:
    - job: launch_e2e_test
    - job: setup
      artifacts: true
  script:
    - |
      ./k8s/scripts/connecting_to_kubernetes_cluster.sh
      ./k8s/scripts/delete_deployment_from_kubernetes.sh "${CONTAINER_VERSION}"

      echo "ARTIFACT_VERSION=${ARTIFACT_VERSION}" >> build.env
      echo "CONTAINER_VERSION=${CONTAINER_VERSION}" >> build.env
      echo "CONTAINER_IMAGE=${CONTAINER_IMAGE}" >> build.env

living_documentation_for_e2e:
  stage: living_documentation_for_e2e
  needs:
    - job: launch_e2e_test
    - job: setup
      artifacts: true
  script:
    - |
      ./pipeline/scripts/3_quality/generate_living_documentation.sh e2e "${ARTIFACT_VERSION}" "${CUKEDOCTOR_MAIN_JAR}"
  artifacts:
    paths:
      - e2e/build
    expire_in: 1 day